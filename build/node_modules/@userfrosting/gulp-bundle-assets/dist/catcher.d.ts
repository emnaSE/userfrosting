/// <reference types="node" />
import { Transform, TransformCallback } from "stream";
import { LogLevel } from "./log-levels";
/**
 * All this does is collect all stream data and once all read resolves a promise with the collected chunks.
 */
export declare class Catcher extends Transform {
    /**
     * Promise that will be resolved with the stream contents once they've been collected.
     */
    Collected: Promise<any[]>;
    /**
     * Holds caught stream content.
     */
    private Results;
    /**
     * Logger function.
     */
    private Logger;
    /**
     * Resolver for promise, may not be immeditately set.
     */
    private Resolve?;
    /**
     * @param logger Used for logging events and errors.
     */
    constructor(logger: (value: string, level: LogLevel) => void);
    /**
     * Collects incoming chunks.
     * @param chunk Incoming chunk to catch.
     * @param encoding Its encoding, if applicable.
     * @param callback Callback used to indicate method completion.
     */
    _transform(chunk: any, encoding: string, callback: TransformCallback): void;
    /**
     * Resolves collection promise.
     * @param callback Callback used to indicate method completion.
     */
    _flush(callback: TransformCallback): void;
}

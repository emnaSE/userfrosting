/// <reference types="node" />
import { Readable, Transform, TransformCallback, Stream } from "stream";
import Vinyl from "vinyl";
import { Config } from "./config/config";
export { default as MergeRawConfigs } from "./config/merge-configs";
export { default as ValidateRawConfig } from "./config/validate-config";
/**
 * Assists in orchastrating bundle operations.
 */
export default class Bundler extends Transform {
    /**
     * Tracks all files resolved within virtual directory tree.
     * Number is used to track preference during inital file collection.
     */
    private ResolvedFiles;
    /**
     * Used in conversion of canonical paths to virtual paths (for scenarios with resource overriding, etc).
     * First string is an absolute path, second is a matching virtual path.
     */
    private VirtualPathRules;
    /**
     * Script bundles to build.
     */
    private ScriptBundles;
    /**
     * Style bundles to build.
     */
    private StyleBundles;
    /**
     * Bundlers to use when generating bundles.
     */
    private Bundlers;
    /**
     * Map containing output filenames for each bundle.
     * Key is bundle name, value is the file path.
     */
    private BundleResultsMap;
    /**
     * Callback to execute once bundle results map is complete.
     */
    private BundleResultsCallback?;
    /**
     * Logger function.
     */
    private Logger;
    /**
     * @param config Raw (but valid) configuration file used for bundle resolution.
     * @param joiner Object capable of generating the Transform streams needed for generation of final bundles.
     */
    constructor(config: Config, joiner: Bundlers, bundleResultsCallback?: (results: Map<string, Vinyl[]>) => void);
    /**
     * Attempts to create a virutal path from the provided path.
     * On failure, the provided path is returned.
     *
     * @param path Absolute path to try and resolve.
     *
     * @returns New or existing path and preference.
     */
    private ResolveVirtualPath;
    /**
     * Collects copies of applicable files to later bundle.
     *
     * @param chunk Stream chunk, may be a Vinyl object.
     * @param encoding Encoding of chunk, if applicable.
     * @param callback Callback to indicate processing is completed.
     */
    _transform(chunk: any, encoding: string, callback: TransformCallback): void;
    /**
     * Does bundling and pushes resulting files into stream.
     * @param callback Callback to indicate processing is completed.
     */
    _flush(callback: TransformCallback): Promise<void>;
}
/**
 * Interface defining factories required to bundle styles and scripts.
 */
export interface Bundlers {
    /**
     * Returns a Transform that will handle bundling of script resources.
     */
    Scripts: BundlerStreamFactory;
    /**
     * Returns a Transform that will handle bundling of style resources.
     */
    Styles: BundlerStreamFactory;
}
/**
 * A function that returns a stream that will be used to bundle assets.
 */
export interface BundlerStreamFactory {
    /**
     * @param name Name of bundle.
     */
    (src: Readable, name: string): Stream;
}
